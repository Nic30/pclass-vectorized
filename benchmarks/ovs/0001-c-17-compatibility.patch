From 8dee2b85bf10ec59d3b9778b850c1737ec781e5f Mon Sep 17 00:00:00 2001
From: Nic30 <nic30@seznam.cz>
Date: Thu, 22 Aug 2019 17:36:55 +0200
Subject: [PATCH 1/3] c++17 compatibility

---
 include/openvswitch/compiler.h |  6 +++++-
 lib/bitmap.h                   |  6 +++---
 lib/packets.h                  | 14 +++++++-------
 lib/tun-metadata.h             |  1 +
 lib/unaligned.h                |  6 +++---
 5 files changed, 19 insertions(+), 14 deletions(-)

diff --git a/include/openvswitch/compiler.h b/include/openvswitch/compiler.h
index c7cb9308d..d7fb66826 100644
--- a/include/openvswitch/compiler.h
+++ b/include/openvswitch/compiler.h
@@ -27,6 +27,10 @@
   #define __has_extension(x) 0
 #endif
 
+#ifndef typeof
+#define typeof(x) __typeof__(x)
+#endif
+
 /* To make OVS_NO_RETURN portable across gcc/clang and MSVC, it should be
  * added at the beginning of the function declaration. */
 #if __GNUC__ && !__CHECKER__
@@ -244,7 +248,7 @@
 #define BUILD_ASSERT(EXPR) ((void) 0)
 #define BUILD_ASSERT_DECL(EXPR) extern int (*build_assert(void))[1]
 #elif defined(__cplusplus) && __cplusplus >= 201103L
-#define BUILD_ASSERT(EXPR) static_assert(EXPR, "assertion failed")
+#define BUILD_ASSERT(EXPR) []{ static_assert(EXPR, "assertion failed"); }
 #define BUILD_ASSERT_DECL(EXPR) static_assert(EXPR, "assertion failed")
 #elif defined(__cplusplus) && __cplusplus < 201103L
 #include <boost/static_assert.hpp>
diff --git a/lib/bitmap.h b/lib/bitmap.h
index 39b759719..00f88f122 100644
--- a/lib/bitmap.h
+++ b/lib/bitmap.h
@@ -48,7 +48,7 @@ bitmap_n_bytes(size_t n_bits)
 static inline unsigned long *
 bitmap_allocate(size_t n_bits)
 {
-    return xzalloc(bitmap_n_bytes(n_bits));
+    return (unsigned long *) xzalloc(bitmap_n_bytes(n_bits));
 }
 
 /* Initializes bitmap to all-1-bits and returns the bitmap pointer. */
@@ -70,13 +70,13 @@ bitmap_init1(unsigned long *bitmap, size_t n_bits)
 static inline unsigned long *
 bitmap_allocate1(size_t n_bits)
 {
-    return bitmap_init1(xmalloc(bitmap_n_bytes(n_bits)), n_bits);
+    return bitmap_init1((unsigned long *) xmalloc(bitmap_n_bytes(n_bits)), n_bits);
 }
 
 static inline unsigned long *
 bitmap_clone(const unsigned long *bitmap, size_t n_bits)
 {
-    return xmemdup(bitmap, bitmap_n_bytes(n_bits));
+    return (unsigned long *) xmemdup(bitmap, bitmap_n_bytes(n_bits));
 }
 
 static inline void
diff --git a/lib/packets.h b/lib/packets.h
index 09a0ac3ef..85fae38bb 100644
--- a/lib/packets.h
+++ b/lib/packets.h
@@ -356,7 +356,7 @@ ovs_be32 set_mpls_lse_values(uint8_t ttl, uint8_t tc, uint8_t bos,
  *
  */
 #define ETH_ADDR_FMT                                                    \
-    "%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8
+    "%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8
 #define ETH_ADDR_ARGS(EA) ETH_ADDR_BYTES_ARGS((EA).ea)
 #define ETH_ADDR_BYTES_ARGS(EAB) \
          (EAB)[0], (EAB)[1], (EAB)[2], (EAB)[3], (EAB)[4], (EAB)[5]
@@ -370,8 +370,8 @@ ovs_be32 set_mpls_lse_values(uint8_t ttl, uint8_t tc, uint8_t bos,
  *
  */
 #define ETH_ADDR64_FMT \
-    "%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":" \
-    "%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8
+    "%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8 ":" \
+    "%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8 ":%02" PRIx8
 #define ETH_ADDR64_ARGS(EA) ETH_ADDR64_BYTES_ARGS((EA).ea64)
 #define ETH_ADDR64_BYTES_ARGS(EAB) \
          (EAB)[0], (EAB)[1], (EAB)[2], (EAB)[3], \
@@ -389,7 +389,7 @@ ovs_be32 set_mpls_lse_values(uint8_t ttl, uint8_t tc, uint8_t bos,
  *     ...
  * }
  */
-#define ETH_ADDR_SCAN_FMT "%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8":%"SCNx8
+#define ETH_ADDR_SCAN_FMT "%" SCNx8 ":%" SCNx8 ":%" SCNx8 ":%" SCNx8 ":%" SCNx8 ":%" SCNx8
 #define ETH_ADDR_SCAN_ARGS(EA) \
     &(EA).ea[0], &(EA).ea[1], &(EA).ea[2], &(EA).ea[3], &(EA).ea[4], &(EA).ea[5]
 
@@ -590,7 +590,7 @@ mpls_lse_to_bos(ovs_be32 mpls_lse)
     return (mpls_lse & htonl(MPLS_BOS_MASK)) != 0;
 }
 
-#define IP_FMT "%"PRIu32".%"PRIu32".%"PRIu32".%"PRIu32
+#define IP_FMT "%" PRIu32 ".%" PRIu32 ".%" PRIu32 ".%" PRIu32
 #define IP_ARGS(ip)                             \
     ntohl(ip) >> 24,                            \
     (ntohl(ip) >> 16) & 0xff,                   \
@@ -607,14 +607,14 @@ mpls_lse_to_bos(ovs_be32 mpls_lse)
  *     ...
  * }
  */
-#define IP_SCAN_FMT "%"SCNu8".%"SCNu8".%"SCNu8".%"SCNu8
+#define IP_SCAN_FMT "%" SCNu8 ".%" SCNu8 ".%" SCNu8 ".%" SCNu8
 #define IP_SCAN_ARGS(ip)                                    \
         ((void) (ovs_be32) *(ip), &((uint8_t *) ip)[0]),    \
         &((uint8_t *) ip)[1],                               \
         &((uint8_t *) ip)[2],                               \
         &((uint8_t *) ip)[3]
 
-#define IP_PORT_SCAN_FMT "%"SCNu8".%"SCNu8".%"SCNu8".%"SCNu8":%"SCNu16
+#define IP_PORT_SCAN_FMT "%" SCNu8 ".%" SCNu8 ".%" SCNu8 ".%" SCNu8 ":%" SCNu16
 #define IP_PORT_SCAN_ARGS(ip, port)                                    \
         ((void) (ovs_be32) *(ip), &((uint8_t *) ip)[0]),    \
         &((uint8_t *) ip)[1],                               \
diff --git a/lib/tun-metadata.h b/lib/tun-metadata.h
index 7dad9504b..2300ea6d4 100644
--- a/lib/tun-metadata.h
+++ b/lib/tun-metadata.h
@@ -24,6 +24,7 @@
 #include "openvswitch/ofpbuf.h"
 #include "openflow/openflow.h"
 #include "openvswitch/tun-metadata.h"
+#include "openvswitch/ofp-errors.h"
 
 struct flow_tnl;
 struct match;
diff --git a/lib/unaligned.h b/lib/unaligned.h
index f40e4e10d..ade692317 100644
--- a/lib/unaligned.h
+++ b/lib/unaligned.h
@@ -65,7 +65,7 @@ struct unaligned_##ABBREV {                     \
     TYPE x __attribute__((__packed__));         \
 };                                              \
 static inline struct unaligned_##ABBREV *       \
-unaligned_##ABBREV(const TYPE *p)               \
+unaligned_ovs_##ABBREV(const TYPE *p)           \
 {                                               \
     return (struct unaligned_##ABBREV *) p;     \
 }                                               \
@@ -73,13 +73,13 @@ unaligned_##ABBREV(const TYPE *p)               \
 static inline TYPE                              \
 get_unaligned_##ABBREV(const TYPE *p)           \
 {                                               \
-    return unaligned_##ABBREV(p)->x;            \
+    return unaligned_ovs_##ABBREV(p)->x;            \
 }                                               \
                                                 \
 static inline void                              \
 put_unaligned_##ABBREV(TYPE *p, TYPE x)         \
 {                                               \
-    unaligned_##ABBREV(p)->x = x;               \
+    unaligned_ovs_##ABBREV(p)->x = x;               \
 }
 
 GCC_UNALIGNED_ACCESSORS(uint16_t, u16);
-- 
2.20.1

